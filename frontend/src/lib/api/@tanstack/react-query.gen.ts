// This file is auto-generated by @hey-api/openapi-ts

import { type Options, loginApiAuthTokenPost, loginJsonApiAuthLoginPost, registerApiAuthRegisterPost, refreshTokenApiAuthRefreshPost, getCurrentUserInfoApiAuthMeGet, changePasswordApiAuthChangePasswordPost, logoutApiAuthLogoutPost, listDocumentsApiDocsGet, createDocumentApiDocsPost, getNavigationApiDocsNavigationGet, getDocumentVersionedApiDocsVersionLangSlugGet, deleteDocumentApiDocsSlugDelete, getDocumentApiDocsSlugGet, updateDocumentApiDocsSlugPut, getDocumentsByCategoryApiDocsCategoryCategoryGet, searchDocumentsApiDocsSearchQueryGet, getDocumentByIdApiDocsDocumentDocIdGet, getBlogPostsApiBlogPostsGet, createBlogPostApiBlogPostsPost, getBlogPostApiBlogPostsPostIdGet, getAllTagsApiBlogTagsGet, getAllCategoriesApiBlogCategoriesGet, getRssFeedApiBlogRssGet, getBlogStatsApiBlogStatsGet, getForumPostsApiForumGet, createForumPostApiForumPost, getUserDraftsApiForumDraftsGet, deleteForumPostApiForumPostIdDelete, getForumPostApiForumPostIdGet, updateForumPostApiForumPostIdPut, getForumRepliesApiForumPostIdRepliesGet, createForumReplyApiForumPostIdRepliesPost, voteForumPostApiForumPostIdVotePost, voteForumReplyApiForumRepliesReplyIdVotePost, reportForumPostApiForumPostIdReportPost, reportForumReplyApiForumRepliesReplyIdReportPost, getDashboardDataApiDashboardGet, getStatsApiDashboardStatsGet, getGeneralAnalyticsApiAnalyticsGet, getContentAnalyticsApiAnalyticsContentGet, getUserAnalyticsApiAnalyticsUsersGet, getUsersApiUsersGet, getUserApiUsersUserIdGet, getUserStatsApiUsersStatsGet, unifiedSearchApiSearchGet, getSearchSuggestionsApiSearchSuggestionsGet, getPopularSearchesApiSearchPopularGet, searchDocumentsApiSearchDocsGet, searchBlogApiSearchBlogGet, searchForumApiSearchForumGet, uploadImageApiUploadImagePost, uploadFileApiUploadFilePost, serveImageApiUploadServeImageFilenameGet, serveFileApiUploadServeFileFilenameGet, listUserUploadsApiUploadListGet, deleteUploadApiUploadFileIdDelete, rootGet, healthCheckHealthGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { LoginApiAuthTokenPostData, LoginApiAuthTokenPostError, LoginApiAuthTokenPostResponse, LoginJsonApiAuthLoginPostData, LoginJsonApiAuthLoginPostError, LoginJsonApiAuthLoginPostResponse, RegisterApiAuthRegisterPostData, RegisterApiAuthRegisterPostError, RegisterApiAuthRegisterPostResponse, RefreshTokenApiAuthRefreshPostData, RefreshTokenApiAuthRefreshPostError, RefreshTokenApiAuthRefreshPostResponse, GetCurrentUserInfoApiAuthMeGetData, ChangePasswordApiAuthChangePasswordPostData, ChangePasswordApiAuthChangePasswordPostError, LogoutApiAuthLogoutPostData, ListDocumentsApiDocsGetData, ListDocumentsApiDocsGetError, CreateDocumentApiDocsPostData, CreateDocumentApiDocsPostError, GetNavigationApiDocsNavigationGetData, GetDocumentVersionedApiDocsVersionLangSlugGetData, DeleteDocumentApiDocsSlugDeleteData, DeleteDocumentApiDocsSlugDeleteError, GetDocumentApiDocsSlugGetData, UpdateDocumentApiDocsSlugPutData, UpdateDocumentApiDocsSlugPutError, GetDocumentsByCategoryApiDocsCategoryCategoryGetData, GetDocumentsByCategoryApiDocsCategoryCategoryGetError, SearchDocumentsApiDocsSearchQueryGetData, SearchDocumentsApiDocsSearchQueryGetError, GetDocumentByIdApiDocsDocumentDocIdGetData, GetBlogPostsApiBlogPostsGetData, CreateBlogPostApiBlogPostsPostData, CreateBlogPostApiBlogPostsPostError, CreateBlogPostApiBlogPostsPostResponse, GetBlogPostApiBlogPostsPostIdGetData, GetAllTagsApiBlogTagsGetData, GetAllCategoriesApiBlogCategoriesGetData, GetRssFeedApiBlogRssGetData, GetBlogStatsApiBlogStatsGetData, GetForumPostsApiForumGetData, CreateForumPostApiForumPostData, CreateForumPostApiForumPostError, CreateForumPostApiForumPostResponse, GetUserDraftsApiForumDraftsGetData, DeleteForumPostApiForumPostIdDeleteData, DeleteForumPostApiForumPostIdDeleteError, GetForumPostApiForumPostIdGetData, UpdateForumPostApiForumPostIdPutData, UpdateForumPostApiForumPostIdPutError, UpdateForumPostApiForumPostIdPutResponse, GetForumRepliesApiForumPostIdRepliesGetData, CreateForumReplyApiForumPostIdRepliesPostData, CreateForumReplyApiForumPostIdRepliesPostError, CreateForumReplyApiForumPostIdRepliesPostResponse, VoteForumPostApiForumPostIdVotePostData, VoteForumPostApiForumPostIdVotePostError, VoteForumReplyApiForumRepliesReplyIdVotePostData, VoteForumReplyApiForumRepliesReplyIdVotePostError, ReportForumPostApiForumPostIdReportPostData, ReportForumPostApiForumPostIdReportPostError, ReportForumReplyApiForumRepliesReplyIdReportPostData, ReportForumReplyApiForumRepliesReplyIdReportPostError, GetDashboardDataApiDashboardGetData, GetStatsApiDashboardStatsGetData, GetGeneralAnalyticsApiAnalyticsGetData, GetContentAnalyticsApiAnalyticsContentGetData, GetUserAnalyticsApiAnalyticsUsersGetData, GetUsersApiUsersGetData, GetUserApiUsersUserIdGetData, GetUserStatsApiUsersStatsGetData, UnifiedSearchApiSearchGetData, GetSearchSuggestionsApiSearchSuggestionsGetData, GetPopularSearchesApiSearchPopularGetData, SearchDocumentsApiSearchDocsGetData, SearchBlogApiSearchBlogGetData, SearchForumApiSearchForumGetData, UploadImageApiUploadImagePostData, UploadImageApiUploadImagePostError, UploadFileApiUploadFilePostData, UploadFileApiUploadFilePostError, ServeImageApiUploadServeImageFilenameGetData, ServeFileApiUploadServeFileFilenameGetData, ListUserUploadsApiUploadListGetData, DeleteUploadApiUploadFileIdDeleteData, DeleteUploadApiUploadFileIdDeleteError, RootGetData, HealthCheckHealthGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const loginApiAuthTokenPostQueryKey = (options: Options<LoginApiAuthTokenPostData>) => createQueryKey('loginApiAuthTokenPost', options);

/**
 * Login
 * 로그인 및 토큰 발급
 */
export const loginApiAuthTokenPostOptions = (options: Options<LoginApiAuthTokenPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginApiAuthTokenPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginApiAuthTokenPostQueryKey(options)
    });
};

/**
 * Login
 * 로그인 및 토큰 발급
 */
export const loginApiAuthTokenPostMutation = (options?: Partial<Options<LoginApiAuthTokenPostData>>): UseMutationOptions<LoginApiAuthTokenPostResponse, AxiosError<LoginApiAuthTokenPostError>, Options<LoginApiAuthTokenPostData>> => {
    const mutationOptions: UseMutationOptions<LoginApiAuthTokenPostResponse, AxiosError<LoginApiAuthTokenPostError>, Options<LoginApiAuthTokenPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginApiAuthTokenPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginJsonApiAuthLoginPostQueryKey = (options: Options<LoginJsonApiAuthLoginPostData>) => createQueryKey('loginJsonApiAuthLoginPost', options);

/**
 * Login Json
 * 로그인 (JSON 형식)
 */
export const loginJsonApiAuthLoginPostOptions = (options: Options<LoginJsonApiAuthLoginPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginJsonApiAuthLoginPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginJsonApiAuthLoginPostQueryKey(options)
    });
};

/**
 * Login Json
 * 로그인 (JSON 형식)
 */
export const loginJsonApiAuthLoginPostMutation = (options?: Partial<Options<LoginJsonApiAuthLoginPostData>>): UseMutationOptions<LoginJsonApiAuthLoginPostResponse, AxiosError<LoginJsonApiAuthLoginPostError>, Options<LoginJsonApiAuthLoginPostData>> => {
    const mutationOptions: UseMutationOptions<LoginJsonApiAuthLoginPostResponse, AxiosError<LoginJsonApiAuthLoginPostError>, Options<LoginJsonApiAuthLoginPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginJsonApiAuthLoginPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const registerApiAuthRegisterPostQueryKey = (options: Options<RegisterApiAuthRegisterPostData>) => createQueryKey('registerApiAuthRegisterPost', options);

/**
 * Register
 * 사용자 등록
 */
export const registerApiAuthRegisterPostOptions = (options: Options<RegisterApiAuthRegisterPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await registerApiAuthRegisterPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerApiAuthRegisterPostQueryKey(options)
    });
};

/**
 * Register
 * 사용자 등록
 */
export const registerApiAuthRegisterPostMutation = (options?: Partial<Options<RegisterApiAuthRegisterPostData>>): UseMutationOptions<RegisterApiAuthRegisterPostResponse, AxiosError<RegisterApiAuthRegisterPostError>, Options<RegisterApiAuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<RegisterApiAuthRegisterPostResponse, AxiosError<RegisterApiAuthRegisterPostError>, Options<RegisterApiAuthRegisterPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await registerApiAuthRegisterPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const refreshTokenApiAuthRefreshPostQueryKey = (options: Options<RefreshTokenApiAuthRefreshPostData>) => createQueryKey('refreshTokenApiAuthRefreshPost', options);

/**
 * Refresh Token
 * 리프레시 토큰으로 새 액세스 토큰 발급
 */
export const refreshTokenApiAuthRefreshPostOptions = (options: Options<RefreshTokenApiAuthRefreshPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await refreshTokenApiAuthRefreshPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: refreshTokenApiAuthRefreshPostQueryKey(options)
    });
};

/**
 * Refresh Token
 * 리프레시 토큰으로 새 액세스 토큰 발급
 */
export const refreshTokenApiAuthRefreshPostMutation = (options?: Partial<Options<RefreshTokenApiAuthRefreshPostData>>): UseMutationOptions<RefreshTokenApiAuthRefreshPostResponse, AxiosError<RefreshTokenApiAuthRefreshPostError>, Options<RefreshTokenApiAuthRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshTokenApiAuthRefreshPostResponse, AxiosError<RefreshTokenApiAuthRefreshPostError>, Options<RefreshTokenApiAuthRefreshPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await refreshTokenApiAuthRefreshPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getCurrentUserInfoApiAuthMeGetQueryKey = (options?: Options<GetCurrentUserInfoApiAuthMeGetData>) => createQueryKey('getCurrentUserInfoApiAuthMeGet', options);

/**
 * Get Current User Info
 * 현재 사용자 정보 가져오기
 */
export const getCurrentUserInfoApiAuthMeGetOptions = (options?: Options<GetCurrentUserInfoApiAuthMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCurrentUserInfoApiAuthMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCurrentUserInfoApiAuthMeGetQueryKey(options)
    });
};

export const changePasswordApiAuthChangePasswordPostQueryKey = (options: Options<ChangePasswordApiAuthChangePasswordPostData>) => createQueryKey('changePasswordApiAuthChangePasswordPost', options);

/**
 * Change Password
 * 비밀번호 변경
 */
export const changePasswordApiAuthChangePasswordPostOptions = (options: Options<ChangePasswordApiAuthChangePasswordPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await changePasswordApiAuthChangePasswordPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: changePasswordApiAuthChangePasswordPostQueryKey(options)
    });
};

/**
 * Change Password
 * 비밀번호 변경
 */
export const changePasswordApiAuthChangePasswordPostMutation = (options?: Partial<Options<ChangePasswordApiAuthChangePasswordPostData>>): UseMutationOptions<unknown, AxiosError<ChangePasswordApiAuthChangePasswordPostError>, Options<ChangePasswordApiAuthChangePasswordPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ChangePasswordApiAuthChangePasswordPostError>, Options<ChangePasswordApiAuthChangePasswordPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await changePasswordApiAuthChangePasswordPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutApiAuthLogoutPostQueryKey = (options?: Options<LogoutApiAuthLogoutPostData>) => createQueryKey('logoutApiAuthLogoutPost', options);

/**
 * Logout
 * 로그아웃 (토큰 무효화 - 실제로는 클라이언트에서 토큰 삭제)
 */
export const logoutApiAuthLogoutPostOptions = (options?: Options<LogoutApiAuthLogoutPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logoutApiAuthLogoutPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutApiAuthLogoutPostQueryKey(options)
    });
};

/**
 * Logout
 * 로그아웃 (토큰 무효화 - 실제로는 클라이언트에서 토큰 삭제)
 */
export const logoutApiAuthLogoutPostMutation = (options?: Partial<Options<LogoutApiAuthLogoutPostData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<LogoutApiAuthLogoutPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<LogoutApiAuthLogoutPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logoutApiAuthLogoutPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listDocumentsApiDocsGetQueryKey = (options?: Options<ListDocumentsApiDocsGetData>) => createQueryKey('listDocumentsApiDocsGet', options);

/**
 * List Documents
 * 문서 목록 조회 (버전/언어 필터링 지원)
 */
export const listDocumentsApiDocsGetOptions = (options?: Options<ListDocumentsApiDocsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDocumentsApiDocsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDocumentsApiDocsGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listDocumentsApiDocsGetInfiniteQueryKey = (options?: Options<ListDocumentsApiDocsGetData>): QueryKey<Options<ListDocumentsApiDocsGetData>> => createQueryKey('listDocumentsApiDocsGet', options, true);

/**
 * List Documents
 * 문서 목록 조회 (버전/언어 필터링 지원)
 */
export const listDocumentsApiDocsGetInfiniteOptions = (options?: Options<ListDocumentsApiDocsGetData>) => {
    return infiniteQueryOptions<unknown, AxiosError<ListDocumentsApiDocsGetError>, InfiniteData<unknown>, QueryKey<Options<ListDocumentsApiDocsGetData>>, number | Pick<QueryKey<Options<ListDocumentsApiDocsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListDocumentsApiDocsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listDocumentsApiDocsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDocumentsApiDocsGetInfiniteQueryKey(options)
    });
};

export const createDocumentApiDocsPostQueryKey = (options: Options<CreateDocumentApiDocsPostData>) => createQueryKey('createDocumentApiDocsPost', options);

/**
 * Create Document
 * 새 문서 생성
 */
export const createDocumentApiDocsPostOptions = (options: Options<CreateDocumentApiDocsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createDocumentApiDocsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createDocumentApiDocsPostQueryKey(options)
    });
};

/**
 * Create Document
 * 새 문서 생성
 */
export const createDocumentApiDocsPostMutation = (options?: Partial<Options<CreateDocumentApiDocsPostData>>): UseMutationOptions<unknown, AxiosError<CreateDocumentApiDocsPostError>, Options<CreateDocumentApiDocsPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<CreateDocumentApiDocsPostError>, Options<CreateDocumentApiDocsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createDocumentApiDocsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNavigationApiDocsNavigationGetQueryKey = (options?: Options<GetNavigationApiDocsNavigationGetData>) => createQueryKey('getNavigationApiDocsNavigationGet', options);

/**
 * Get Navigation
 * 네비게이션 구조 조회
 */
export const getNavigationApiDocsNavigationGetOptions = (options?: Options<GetNavigationApiDocsNavigationGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNavigationApiDocsNavigationGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNavigationApiDocsNavigationGetQueryKey(options)
    });
};

export const getDocumentVersionedApiDocsVersionLangSlugGetQueryKey = (options: Options<GetDocumentVersionedApiDocsVersionLangSlugGetData>) => createQueryKey('getDocumentVersionedApiDocsVersionLangSlugGet', options);

/**
 * Get Document Versioned
 * 버전별/언어별 문서 조회
 */
export const getDocumentVersionedApiDocsVersionLangSlugGetOptions = (options: Options<GetDocumentVersionedApiDocsVersionLangSlugGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentVersionedApiDocsVersionLangSlugGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentVersionedApiDocsVersionLangSlugGetQueryKey(options)
    });
};

/**
 * Delete Document
 * 문서 삭제
 */
export const deleteDocumentApiDocsSlugDeleteMutation = (options?: Partial<Options<DeleteDocumentApiDocsSlugDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteDocumentApiDocsSlugDeleteError>, Options<DeleteDocumentApiDocsSlugDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteDocumentApiDocsSlugDeleteError>, Options<DeleteDocumentApiDocsSlugDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteDocumentApiDocsSlugDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDocumentApiDocsSlugGetQueryKey = (options: Options<GetDocumentApiDocsSlugGetData>) => createQueryKey('getDocumentApiDocsSlugGet', options);

/**
 * Get Document
 * 문서 조회 (slug 기준)
 */
export const getDocumentApiDocsSlugGetOptions = (options: Options<GetDocumentApiDocsSlugGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentApiDocsSlugGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentApiDocsSlugGetQueryKey(options)
    });
};

/**
 * Update Document
 * 문서 업데이트
 */
export const updateDocumentApiDocsSlugPutMutation = (options?: Partial<Options<UpdateDocumentApiDocsSlugPutData>>): UseMutationOptions<unknown, AxiosError<UpdateDocumentApiDocsSlugPutError>, Options<UpdateDocumentApiDocsSlugPutData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpdateDocumentApiDocsSlugPutError>, Options<UpdateDocumentApiDocsSlugPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateDocumentApiDocsSlugPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDocumentsByCategoryApiDocsCategoryCategoryGetQueryKey = (options: Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>) => createQueryKey('getDocumentsByCategoryApiDocsCategoryCategoryGet', options);

/**
 * Get Documents By Category
 * 카테고리별 문서 조회
 */
export const getDocumentsByCategoryApiDocsCategoryCategoryGetOptions = (options: Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentsByCategoryApiDocsCategoryCategoryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentsByCategoryApiDocsCategoryCategoryGetQueryKey(options)
    });
};

export const getDocumentsByCategoryApiDocsCategoryCategoryGetInfiniteQueryKey = (options: Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>): QueryKey<Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>> => createQueryKey('getDocumentsByCategoryApiDocsCategoryCategoryGet', options, true);

/**
 * Get Documents By Category
 * 카테고리별 문서 조회
 */
export const getDocumentsByCategoryApiDocsCategoryCategoryGetInfiniteOptions = (options: Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>) => {
    return infiniteQueryOptions<unknown, AxiosError<GetDocumentsByCategoryApiDocsCategoryCategoryGetError>, InfiniteData<unknown>, QueryKey<Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>>, number | Pick<QueryKey<Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getDocumentsByCategoryApiDocsCategoryCategoryGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentsByCategoryApiDocsCategoryCategoryGetInfiniteQueryKey(options)
    });
};

export const searchDocumentsApiDocsSearchQueryGetQueryKey = (options: Options<SearchDocumentsApiDocsSearchQueryGetData>) => createQueryKey('searchDocumentsApiDocsSearchQueryGet', options);

/**
 * Search Documents
 * 문서 전체 텍스트 검색
 */
export const searchDocumentsApiDocsSearchQueryGetOptions = (options: Options<SearchDocumentsApiDocsSearchQueryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchDocumentsApiDocsSearchQueryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchDocumentsApiDocsSearchQueryGetQueryKey(options)
    });
};

export const searchDocumentsApiDocsSearchQueryGetInfiniteQueryKey = (options: Options<SearchDocumentsApiDocsSearchQueryGetData>): QueryKey<Options<SearchDocumentsApiDocsSearchQueryGetData>> => createQueryKey('searchDocumentsApiDocsSearchQueryGet', options, true);

/**
 * Search Documents
 * 문서 전체 텍스트 검색
 */
export const searchDocumentsApiDocsSearchQueryGetInfiniteOptions = (options: Options<SearchDocumentsApiDocsSearchQueryGetData>) => {
    return infiniteQueryOptions<unknown, AxiosError<SearchDocumentsApiDocsSearchQueryGetError>, InfiniteData<unknown>, QueryKey<Options<SearchDocumentsApiDocsSearchQueryGetData>>, number | Pick<QueryKey<Options<SearchDocumentsApiDocsSearchQueryGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<SearchDocumentsApiDocsSearchQueryGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await searchDocumentsApiDocsSearchQueryGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchDocumentsApiDocsSearchQueryGetInfiniteQueryKey(options)
    });
};

export const getDocumentByIdApiDocsDocumentDocIdGetQueryKey = (options: Options<GetDocumentByIdApiDocsDocumentDocIdGetData>) => createQueryKey('getDocumentByIdApiDocsDocumentDocIdGet', options);

/**
 * Get Document By Id
 * ID로 문서 조회 (레거시 엔드포인트)
 */
export const getDocumentByIdApiDocsDocumentDocIdGetOptions = (options: Options<GetDocumentByIdApiDocsDocumentDocIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentByIdApiDocsDocumentDocIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentByIdApiDocsDocumentDocIdGetQueryKey(options)
    });
};

export const getBlogPostsApiBlogPostsGetQueryKey = (options?: Options<GetBlogPostsApiBlogPostsGetData>) => createQueryKey('getBlogPostsApiBlogPostsGet', options);

/**
 * Get Blog Posts
 * 블로그 포스트 목록 조회 (태그/카테고리 필터링 및 정렬 지원)
 */
export const getBlogPostsApiBlogPostsGetOptions = (options?: Options<GetBlogPostsApiBlogPostsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBlogPostsApiBlogPostsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBlogPostsApiBlogPostsGetQueryKey(options)
    });
};

export const createBlogPostApiBlogPostsPostQueryKey = (options: Options<CreateBlogPostApiBlogPostsPostData>) => createQueryKey('createBlogPostApiBlogPostsPost', options);

/**
 * Create Blog Post
 * 새 블로그 포스트 생성
 */
export const createBlogPostApiBlogPostsPostOptions = (options: Options<CreateBlogPostApiBlogPostsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createBlogPostApiBlogPostsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createBlogPostApiBlogPostsPostQueryKey(options)
    });
};

/**
 * Create Blog Post
 * 새 블로그 포스트 생성
 */
export const createBlogPostApiBlogPostsPostMutation = (options?: Partial<Options<CreateBlogPostApiBlogPostsPostData>>): UseMutationOptions<CreateBlogPostApiBlogPostsPostResponse, AxiosError<CreateBlogPostApiBlogPostsPostError>, Options<CreateBlogPostApiBlogPostsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateBlogPostApiBlogPostsPostResponse, AxiosError<CreateBlogPostApiBlogPostsPostError>, Options<CreateBlogPostApiBlogPostsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createBlogPostApiBlogPostsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBlogPostApiBlogPostsPostIdGetQueryKey = (options: Options<GetBlogPostApiBlogPostsPostIdGetData>) => createQueryKey('getBlogPostApiBlogPostsPostIdGet', options);

/**
 * Get Blog Post
 * 특정 블로그 포스트 조회
 */
export const getBlogPostApiBlogPostsPostIdGetOptions = (options: Options<GetBlogPostApiBlogPostsPostIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBlogPostApiBlogPostsPostIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBlogPostApiBlogPostsPostIdGetQueryKey(options)
    });
};

export const getAllTagsApiBlogTagsGetQueryKey = (options?: Options<GetAllTagsApiBlogTagsGetData>) => createQueryKey('getAllTagsApiBlogTagsGet', options);

/**
 * Get All Tags
 * 모든 태그 목록 조회
 */
export const getAllTagsApiBlogTagsGetOptions = (options?: Options<GetAllTagsApiBlogTagsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllTagsApiBlogTagsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllTagsApiBlogTagsGetQueryKey(options)
    });
};

export const getAllCategoriesApiBlogCategoriesGetQueryKey = (options?: Options<GetAllCategoriesApiBlogCategoriesGetData>) => createQueryKey('getAllCategoriesApiBlogCategoriesGet', options);

/**
 * Get All Categories
 * 모든 카테고리 목록 조회
 */
export const getAllCategoriesApiBlogCategoriesGetOptions = (options?: Options<GetAllCategoriesApiBlogCategoriesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllCategoriesApiBlogCategoriesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllCategoriesApiBlogCategoriesGetQueryKey(options)
    });
};

export const getRssFeedApiBlogRssGetQueryKey = (options?: Options<GetRssFeedApiBlogRssGetData>) => createQueryKey('getRssFeedApiBlogRssGet', options);

/**
 * Get Rss Feed
 * 블로그 RSS 피드 제공
 */
export const getRssFeedApiBlogRssGetOptions = (options?: Options<GetRssFeedApiBlogRssGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRssFeedApiBlogRssGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRssFeedApiBlogRssGetQueryKey(options)
    });
};

export const getBlogStatsApiBlogStatsGetQueryKey = (options?: Options<GetBlogStatsApiBlogStatsGetData>) => createQueryKey('getBlogStatsApiBlogStatsGet', options);

/**
 * Get Blog Stats
 * 블로그 통계 정보
 */
export const getBlogStatsApiBlogStatsGetOptions = (options?: Options<GetBlogStatsApiBlogStatsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBlogStatsApiBlogStatsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBlogStatsApiBlogStatsGetQueryKey(options)
    });
};

export const getForumPostsApiForumGetQueryKey = (options?: Options<GetForumPostsApiForumGetData>) => createQueryKey('getForumPostsApiForumGet', options);

/**
 * Get Forum Posts
 * 게시판 포스트 목록 가져오기 (필터링 및 정렬 지원)
 */
export const getForumPostsApiForumGetOptions = (options?: Options<GetForumPostsApiForumGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getForumPostsApiForumGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getForumPostsApiForumGetQueryKey(options)
    });
};

export const createForumPostApiForumPostQueryKey = (options: Options<CreateForumPostApiForumPostData>) => createQueryKey('createForumPostApiForumPost', options);

/**
 * Create Forum Post
 * 새 게시판 포스트 생성
 */
export const createForumPostApiForumPostOptions = (options: Options<CreateForumPostApiForumPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createForumPostApiForumPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createForumPostApiForumPostQueryKey(options)
    });
};

/**
 * Create Forum Post
 * 새 게시판 포스트 생성
 */
export const createForumPostApiForumPostMutation = (options?: Partial<Options<CreateForumPostApiForumPostData>>): UseMutationOptions<CreateForumPostApiForumPostResponse, AxiosError<CreateForumPostApiForumPostError>, Options<CreateForumPostApiForumPostData>> => {
    const mutationOptions: UseMutationOptions<CreateForumPostApiForumPostResponse, AxiosError<CreateForumPostApiForumPostError>, Options<CreateForumPostApiForumPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createForumPostApiForumPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserDraftsApiForumDraftsGetQueryKey = (options?: Options<GetUserDraftsApiForumDraftsGetData>) => createQueryKey('getUserDraftsApiForumDraftsGet', options);

/**
 * Get User Drafts
 * 사용자의 초안 목록 가져오기
 */
export const getUserDraftsApiForumDraftsGetOptions = (options?: Options<GetUserDraftsApiForumDraftsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserDraftsApiForumDraftsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserDraftsApiForumDraftsGetQueryKey(options)
    });
};

/**
 * Delete Forum Post
 * 게시물 삭제 (작성자 또는 관리자만 가능)
 */
export const deleteForumPostApiForumPostIdDeleteMutation = (options?: Partial<Options<DeleteForumPostApiForumPostIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteForumPostApiForumPostIdDeleteError>, Options<DeleteForumPostApiForumPostIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteForumPostApiForumPostIdDeleteError>, Options<DeleteForumPostApiForumPostIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteForumPostApiForumPostIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getForumPostApiForumPostIdGetQueryKey = (options: Options<GetForumPostApiForumPostIdGetData>) => createQueryKey('getForumPostApiForumPostIdGet', options);

/**
 * Get Forum Post
 * 특정 게시판 포스트 가져오기
 */
export const getForumPostApiForumPostIdGetOptions = (options: Options<GetForumPostApiForumPostIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getForumPostApiForumPostIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getForumPostApiForumPostIdGetQueryKey(options)
    });
};

/**
 * Update Forum Post
 * 게시물 수정 (작성자 또는 관리자만 가능)
 */
export const updateForumPostApiForumPostIdPutMutation = (options?: Partial<Options<UpdateForumPostApiForumPostIdPutData>>): UseMutationOptions<UpdateForumPostApiForumPostIdPutResponse, AxiosError<UpdateForumPostApiForumPostIdPutError>, Options<UpdateForumPostApiForumPostIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateForumPostApiForumPostIdPutResponse, AxiosError<UpdateForumPostApiForumPostIdPutError>, Options<UpdateForumPostApiForumPostIdPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateForumPostApiForumPostIdPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getForumRepliesApiForumPostIdRepliesGetQueryKey = (options: Options<GetForumRepliesApiForumPostIdRepliesGetData>) => createQueryKey('getForumRepliesApiForumPostIdRepliesGet', options);

/**
 * Get Forum Replies
 * 게시물 댓글 목록 조회
 */
export const getForumRepliesApiForumPostIdRepliesGetOptions = (options: Options<GetForumRepliesApiForumPostIdRepliesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getForumRepliesApiForumPostIdRepliesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getForumRepliesApiForumPostIdRepliesGetQueryKey(options)
    });
};

export const createForumReplyApiForumPostIdRepliesPostQueryKey = (options: Options<CreateForumReplyApiForumPostIdRepliesPostData>) => createQueryKey('createForumReplyApiForumPostIdRepliesPost', options);

/**
 * Create Forum Reply
 * 게시물에 댓글 작성
 */
export const createForumReplyApiForumPostIdRepliesPostOptions = (options: Options<CreateForumReplyApiForumPostIdRepliesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createForumReplyApiForumPostIdRepliesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createForumReplyApiForumPostIdRepliesPostQueryKey(options)
    });
};

/**
 * Create Forum Reply
 * 게시물에 댓글 작성
 */
export const createForumReplyApiForumPostIdRepliesPostMutation = (options?: Partial<Options<CreateForumReplyApiForumPostIdRepliesPostData>>): UseMutationOptions<CreateForumReplyApiForumPostIdRepliesPostResponse, AxiosError<CreateForumReplyApiForumPostIdRepliesPostError>, Options<CreateForumReplyApiForumPostIdRepliesPostData>> => {
    const mutationOptions: UseMutationOptions<CreateForumReplyApiForumPostIdRepliesPostResponse, AxiosError<CreateForumReplyApiForumPostIdRepliesPostError>, Options<CreateForumReplyApiForumPostIdRepliesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createForumReplyApiForumPostIdRepliesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const voteForumPostApiForumPostIdVotePostQueryKey = (options: Options<VoteForumPostApiForumPostIdVotePostData>) => createQueryKey('voteForumPostApiForumPostIdVotePost', options);

/**
 * Vote Forum Post
 * 게시물 추천/비추천
 */
export const voteForumPostApiForumPostIdVotePostOptions = (options: Options<VoteForumPostApiForumPostIdVotePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await voteForumPostApiForumPostIdVotePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: voteForumPostApiForumPostIdVotePostQueryKey(options)
    });
};

/**
 * Vote Forum Post
 * 게시물 추천/비추천
 */
export const voteForumPostApiForumPostIdVotePostMutation = (options?: Partial<Options<VoteForumPostApiForumPostIdVotePostData>>): UseMutationOptions<unknown, AxiosError<VoteForumPostApiForumPostIdVotePostError>, Options<VoteForumPostApiForumPostIdVotePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<VoteForumPostApiForumPostIdVotePostError>, Options<VoteForumPostApiForumPostIdVotePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await voteForumPostApiForumPostIdVotePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const voteForumReplyApiForumRepliesReplyIdVotePostQueryKey = (options: Options<VoteForumReplyApiForumRepliesReplyIdVotePostData>) => createQueryKey('voteForumReplyApiForumRepliesReplyIdVotePost', options);

/**
 * Vote Forum Reply
 * 댓글 추천/비추천
 */
export const voteForumReplyApiForumRepliesReplyIdVotePostOptions = (options: Options<VoteForumReplyApiForumRepliesReplyIdVotePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await voteForumReplyApiForumRepliesReplyIdVotePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: voteForumReplyApiForumRepliesReplyIdVotePostQueryKey(options)
    });
};

/**
 * Vote Forum Reply
 * 댓글 추천/비추천
 */
export const voteForumReplyApiForumRepliesReplyIdVotePostMutation = (options?: Partial<Options<VoteForumReplyApiForumRepliesReplyIdVotePostData>>): UseMutationOptions<unknown, AxiosError<VoteForumReplyApiForumRepliesReplyIdVotePostError>, Options<VoteForumReplyApiForumRepliesReplyIdVotePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<VoteForumReplyApiForumRepliesReplyIdVotePostError>, Options<VoteForumReplyApiForumRepliesReplyIdVotePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await voteForumReplyApiForumRepliesReplyIdVotePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const reportForumPostApiForumPostIdReportPostQueryKey = (options: Options<ReportForumPostApiForumPostIdReportPostData>) => createQueryKey('reportForumPostApiForumPostIdReportPost', options);

/**
 * Report Forum Post
 * 게시물 신고
 */
export const reportForumPostApiForumPostIdReportPostOptions = (options: Options<ReportForumPostApiForumPostIdReportPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await reportForumPostApiForumPostIdReportPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: reportForumPostApiForumPostIdReportPostQueryKey(options)
    });
};

/**
 * Report Forum Post
 * 게시물 신고
 */
export const reportForumPostApiForumPostIdReportPostMutation = (options?: Partial<Options<ReportForumPostApiForumPostIdReportPostData>>): UseMutationOptions<unknown, AxiosError<ReportForumPostApiForumPostIdReportPostError>, Options<ReportForumPostApiForumPostIdReportPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ReportForumPostApiForumPostIdReportPostError>, Options<ReportForumPostApiForumPostIdReportPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await reportForumPostApiForumPostIdReportPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const reportForumReplyApiForumRepliesReplyIdReportPostQueryKey = (options: Options<ReportForumReplyApiForumRepliesReplyIdReportPostData>) => createQueryKey('reportForumReplyApiForumRepliesReplyIdReportPost', options);

/**
 * Report Forum Reply
 * 댓글 신고
 */
export const reportForumReplyApiForumRepliesReplyIdReportPostOptions = (options: Options<ReportForumReplyApiForumRepliesReplyIdReportPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await reportForumReplyApiForumRepliesReplyIdReportPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: reportForumReplyApiForumRepliesReplyIdReportPostQueryKey(options)
    });
};

/**
 * Report Forum Reply
 * 댓글 신고
 */
export const reportForumReplyApiForumRepliesReplyIdReportPostMutation = (options?: Partial<Options<ReportForumReplyApiForumRepliesReplyIdReportPostData>>): UseMutationOptions<unknown, AxiosError<ReportForumReplyApiForumRepliesReplyIdReportPostError>, Options<ReportForumReplyApiForumRepliesReplyIdReportPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<ReportForumReplyApiForumRepliesReplyIdReportPostError>, Options<ReportForumReplyApiForumRepliesReplyIdReportPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await reportForumReplyApiForumRepliesReplyIdReportPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDashboardDataApiDashboardGetQueryKey = (options?: Options<GetDashboardDataApiDashboardGetData>) => createQueryKey('getDashboardDataApiDashboardGet', options);

/**
 * Get Dashboard Data
 * 대시보드 데이터 가져오기
 */
export const getDashboardDataApiDashboardGetOptions = (options?: Options<GetDashboardDataApiDashboardGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDashboardDataApiDashboardGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDashboardDataApiDashboardGetQueryKey(options)
    });
};

export const getStatsApiDashboardStatsGetQueryKey = (options?: Options<GetStatsApiDashboardStatsGetData>) => createQueryKey('getStatsApiDashboardStatsGet', options);

/**
 * Get Stats
 * 시스템 통계 가져오기
 */
export const getStatsApiDashboardStatsGetOptions = (options?: Options<GetStatsApiDashboardStatsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatsApiDashboardStatsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatsApiDashboardStatsGetQueryKey(options)
    });
};

export const getGeneralAnalyticsApiAnalyticsGetQueryKey = (options?: Options<GetGeneralAnalyticsApiAnalyticsGetData>) => createQueryKey('getGeneralAnalyticsApiAnalyticsGet', options);

/**
 * Get General Analytics
 * 일반 분석 데이터 조회
 */
export const getGeneralAnalyticsApiAnalyticsGetOptions = (options?: Options<GetGeneralAnalyticsApiAnalyticsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGeneralAnalyticsApiAnalyticsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGeneralAnalyticsApiAnalyticsGetQueryKey(options)
    });
};

export const getContentAnalyticsApiAnalyticsContentGetQueryKey = (options?: Options<GetContentAnalyticsApiAnalyticsContentGetData>) => createQueryKey('getContentAnalyticsApiAnalyticsContentGet', options);

/**
 * Get Content Analytics
 * 콘텐츠 분석 데이터 조회
 */
export const getContentAnalyticsApiAnalyticsContentGetOptions = (options?: Options<GetContentAnalyticsApiAnalyticsContentGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getContentAnalyticsApiAnalyticsContentGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getContentAnalyticsApiAnalyticsContentGetQueryKey(options)
    });
};

export const getUserAnalyticsApiAnalyticsUsersGetQueryKey = (options?: Options<GetUserAnalyticsApiAnalyticsUsersGetData>) => createQueryKey('getUserAnalyticsApiAnalyticsUsersGet', options);

/**
 * Get User Analytics
 * 사용자 분석 데이터 조회
 */
export const getUserAnalyticsApiAnalyticsUsersGetOptions = (options?: Options<GetUserAnalyticsApiAnalyticsUsersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserAnalyticsApiAnalyticsUsersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserAnalyticsApiAnalyticsUsersGetQueryKey(options)
    });
};

export const getUsersApiUsersGetQueryKey = (options?: Options<GetUsersApiUsersGetData>) => createQueryKey('getUsersApiUsersGet', options);

/**
 * Get Users
 * 사용자 목록 조회
 */
export const getUsersApiUsersGetOptions = (options?: Options<GetUsersApiUsersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersApiUsersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersApiUsersGetQueryKey(options)
    });
};

export const getUserApiUsersUserIdGetQueryKey = (options: Options<GetUserApiUsersUserIdGetData>) => createQueryKey('getUserApiUsersUserIdGet', options);

/**
 * Get User
 * 특정 사용자 조회
 */
export const getUserApiUsersUserIdGetOptions = (options: Options<GetUserApiUsersUserIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserApiUsersUserIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserApiUsersUserIdGetQueryKey(options)
    });
};

export const getUserStatsApiUsersStatsGetQueryKey = (options?: Options<GetUserStatsApiUsersStatsGetData>) => createQueryKey('getUserStatsApiUsersStatsGet', options);

/**
 * Get User Stats
 * 사용자 통계 정보
 */
export const getUserStatsApiUsersStatsGetOptions = (options?: Options<GetUserStatsApiUsersStatsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserStatsApiUsersStatsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserStatsApiUsersStatsGetQueryKey(options)
    });
};

export const unifiedSearchApiSearchGetQueryKey = (options: Options<UnifiedSearchApiSearchGetData>) => createQueryKey('unifiedSearchApiSearchGet', options);

/**
 * Unified Search
 * 통합 검색 API
 */
export const unifiedSearchApiSearchGetOptions = (options: Options<UnifiedSearchApiSearchGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await unifiedSearchApiSearchGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unifiedSearchApiSearchGetQueryKey(options)
    });
};

export const getSearchSuggestionsApiSearchSuggestionsGetQueryKey = (options: Options<GetSearchSuggestionsApiSearchSuggestionsGetData>) => createQueryKey('getSearchSuggestionsApiSearchSuggestionsGet', options);

/**
 * Get Search Suggestions
 * 검색 자동완성 제안
 */
export const getSearchSuggestionsApiSearchSuggestionsGetOptions = (options: Options<GetSearchSuggestionsApiSearchSuggestionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSearchSuggestionsApiSearchSuggestionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSearchSuggestionsApiSearchSuggestionsGetQueryKey(options)
    });
};

export const getPopularSearchesApiSearchPopularGetQueryKey = (options?: Options<GetPopularSearchesApiSearchPopularGetData>) => createQueryKey('getPopularSearchesApiSearchPopularGet', options);

/**
 * Get Popular Searches
 * 인기 검색어 조회
 */
export const getPopularSearchesApiSearchPopularGetOptions = (options?: Options<GetPopularSearchesApiSearchPopularGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPopularSearchesApiSearchPopularGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPopularSearchesApiSearchPopularGetQueryKey(options)
    });
};

export const searchDocumentsApiSearchDocsGetQueryKey = (options: Options<SearchDocumentsApiSearchDocsGetData>) => createQueryKey('searchDocumentsApiSearchDocsGet', options);

/**
 * Search Documents
 * 문서 전용 검색
 */
export const searchDocumentsApiSearchDocsGetOptions = (options: Options<SearchDocumentsApiSearchDocsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchDocumentsApiSearchDocsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchDocumentsApiSearchDocsGetQueryKey(options)
    });
};

export const searchBlogApiSearchBlogGetQueryKey = (options: Options<SearchBlogApiSearchBlogGetData>) => createQueryKey('searchBlogApiSearchBlogGet', options);

/**
 * Search Blog
 * 블로그 전용 검색
 */
export const searchBlogApiSearchBlogGetOptions = (options: Options<SearchBlogApiSearchBlogGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchBlogApiSearchBlogGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchBlogApiSearchBlogGetQueryKey(options)
    });
};

export const searchForumApiSearchForumGetQueryKey = (options: Options<SearchForumApiSearchForumGetData>) => createQueryKey('searchForumApiSearchForumGet', options);

/**
 * Search Forum
 * 포럼 전용 검색
 */
export const searchForumApiSearchForumGetOptions = (options: Options<SearchForumApiSearchForumGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchForumApiSearchForumGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchForumApiSearchForumGetQueryKey(options)
    });
};

export const uploadImageApiUploadImagePostQueryKey = (options: Options<UploadImageApiUploadImagePostData>) => createQueryKey('uploadImageApiUploadImagePost', options);

/**
 * Upload Image
 * 이미지 파일 업로드
 */
export const uploadImageApiUploadImagePostOptions = (options: Options<UploadImageApiUploadImagePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadImageApiUploadImagePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadImageApiUploadImagePostQueryKey(options)
    });
};

/**
 * Upload Image
 * 이미지 파일 업로드
 */
export const uploadImageApiUploadImagePostMutation = (options?: Partial<Options<UploadImageApiUploadImagePostData>>): UseMutationOptions<unknown, AxiosError<UploadImageApiUploadImagePostError>, Options<UploadImageApiUploadImagePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UploadImageApiUploadImagePostError>, Options<UploadImageApiUploadImagePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadImageApiUploadImagePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadFileApiUploadFilePostQueryKey = (options: Options<UploadFileApiUploadFilePostData>) => createQueryKey('uploadFileApiUploadFilePost', options);

/**
 * Upload File
 * 일반 파일 업로드
 */
export const uploadFileApiUploadFilePostOptions = (options: Options<UploadFileApiUploadFilePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadFileApiUploadFilePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadFileApiUploadFilePostQueryKey(options)
    });
};

/**
 * Upload File
 * 일반 파일 업로드
 */
export const uploadFileApiUploadFilePostMutation = (options?: Partial<Options<UploadFileApiUploadFilePostData>>): UseMutationOptions<unknown, AxiosError<UploadFileApiUploadFilePostError>, Options<UploadFileApiUploadFilePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UploadFileApiUploadFilePostError>, Options<UploadFileApiUploadFilePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadFileApiUploadFilePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const serveImageApiUploadServeImageFilenameGetQueryKey = (options: Options<ServeImageApiUploadServeImageFilenameGetData>) => createQueryKey('serveImageApiUploadServeImageFilenameGet', options);

/**
 * Serve Image
 * 이미지 파일 서빙
 */
export const serveImageApiUploadServeImageFilenameGetOptions = (options: Options<ServeImageApiUploadServeImageFilenameGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await serveImageApiUploadServeImageFilenameGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: serveImageApiUploadServeImageFilenameGetQueryKey(options)
    });
};

export const serveFileApiUploadServeFileFilenameGetQueryKey = (options: Options<ServeFileApiUploadServeFileFilenameGetData>) => createQueryKey('serveFileApiUploadServeFileFilenameGet', options);

/**
 * Serve File
 * 일반 파일 서빙 (다운로드)
 */
export const serveFileApiUploadServeFileFilenameGetOptions = (options: Options<ServeFileApiUploadServeFileFilenameGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await serveFileApiUploadServeFileFilenameGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: serveFileApiUploadServeFileFilenameGetQueryKey(options)
    });
};

export const listUserUploadsApiUploadListGetQueryKey = (options?: Options<ListUserUploadsApiUploadListGetData>) => createQueryKey('listUserUploadsApiUploadListGet', options);

/**
 * List User Uploads
 * 사용자가 업로드한 파일 목록 조회
 */
export const listUserUploadsApiUploadListGetOptions = (options?: Options<ListUserUploadsApiUploadListGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUserUploadsApiUploadListGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUserUploadsApiUploadListGetQueryKey(options)
    });
};

/**
 * Delete Upload
 * 업로드된 파일 삭제
 */
export const deleteUploadApiUploadFileIdDeleteMutation = (options?: Partial<Options<DeleteUploadApiUploadFileIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteUploadApiUploadFileIdDeleteError>, Options<DeleteUploadApiUploadFileIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteUploadApiUploadFileIdDeleteError>, Options<DeleteUploadApiUploadFileIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUploadApiUploadFileIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 * 루트 엔드포인트
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const healthCheckHealthGetQueryKey = (options?: Options<HealthCheckHealthGetData>) => createQueryKey('healthCheckHealthGet', options);

/**
 * Health Check
 * 헬스 체크 엔드포인트
 */
export const healthCheckHealthGetOptions = (options?: Options<HealthCheckHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckHealthGetQueryKey(options)
    });
};