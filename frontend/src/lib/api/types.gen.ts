// This file is auto-generated by @hey-api/openapi-ts

/**
 * BlogPost
 */
export type BlogPost = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Author
     */
    author: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
    /**
     * Tags
     */
    tags?: Array<string>;
    /**
     * Categories
     */
    categories?: Array<string>;
    /**
     * Published
     */
    published?: boolean;
    /**
     * Slug
     */
    slug: string;
    /**
     * Excerpt
     */
    excerpt?: string | null;
    /**
     * Reading Time
     */
    reading_time?: number | null;
    /**
     * Views
     */
    views?: number;
};

/**
 * BlogPostCreate
 */
export type BlogPostCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Tags
     */
    tags?: Array<string>;
    /**
     * Categories
     */
    categories?: Array<string>;
    /**
     * Published
     */
    published?: boolean;
    /**
     * Slug
     */
    slug?: string | null;
    /**
     * Excerpt
     */
    excerpt?: string | null;
};

/**
 * Body_login_api_auth_token_post
 */
export type BodyLoginApiAuthTokenPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_upload_file_api_upload_file_post
 */
export type BodyUploadFileApiUploadFilePost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_upload_image_api_upload_image_post
 */
export type BodyUploadImageApiUploadImagePost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * CreateForumPost
 */
export type CreateForumPost = {
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Tags
     */
    tags?: Array<string>;
    /**
     * Category
     */
    category?: string | null;
    /**
     * Is Draft
     */
    is_draft?: boolean;
    /**
     * Is Private
     */
    is_private?: boolean;
};

/**
 * CreateForumReply
 */
export type CreateForumReply = {
    /**
     * Content
     */
    content: string;
    /**
     * Parent Id
     */
    parent_id?: string | null;
};

/**
 * ForumPost
 */
export type ForumPost = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Author
     */
    author: string;
    /**
     * Author Id
     */
    author_id: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Replies Count
     */
    replies_count?: number;
    /**
     * Views
     */
    views?: number;
    /**
     * Likes
     */
    likes?: number;
    /**
     * Dislikes
     */
    dislikes?: number;
    /**
     * Tags
     */
    tags?: Array<string>;
    /**
     * Category
     */
    category?: string | null;
    /**
     * Status
     */
    status?: string;
    /**
     * Is Pinned
     */
    is_pinned?: boolean;
    /**
     * Is Locked
     */
    is_locked?: boolean;
    /**
     * Is Draft
     */
    is_draft?: boolean;
    /**
     * Is Private
     */
    is_private?: boolean;
};

/**
 * ForumReply
 */
export type ForumReply = {
    /**
     * Id
     */
    id: string;
    /**
     * Post Id
     */
    post_id: string;
    /**
     * Content
     */
    content: string;
    /**
     * Author
     */
    author: string;
    /**
     * Author Id
     */
    author_id: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Likes
     */
    likes?: number;
    /**
     * Dislikes
     */
    dislikes?: number;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Status
     */
    status?: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * PasswordChange
 */
export type PasswordChange = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * ReportRequest
 */
export type ReportRequest = {
    /**
     * Reason
     */
    reason: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * SearchResponse
 */
export type SearchResponse = {
    /**
     * Results
     */
    results: Array<SearchResult>;
    /**
     * Total
     */
    total: number;
    /**
     * Query
     */
    query: string;
    /**
     * Took Ms
     */
    took_ms: number;
};

/**
 * SearchResult
 */
export type SearchResult = {
    /**
     * Id
     */
    id: string;
    /**
     * Type
     */
    type: string;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Url
     */
    url: string;
    /**
     * Excerpt
     */
    excerpt?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Category
     */
    category?: string | null;
    /**
     * Author
     */
    author?: string | null;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Match Score
     */
    match_score?: number | null;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type: string;
};

/**
 * TokenRefresh
 */
export type TokenRefresh = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * UpdateForumPost
 */
export type UpdateForumPost = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Category
     */
    category?: string | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserLogin
 */
export type UserLogin = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VoteRequest
 */
export type VoteRequest = {
    /**
     * Type
     */
    type: string;
};

/**
 * User
 */
export type AppRoutersAuthUser = {
    /**
     * User Id
     */
    user_id: string;
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email: string;
    /**
     * Role
     */
    role?: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * User
 */
export type AppRoutersUsersUser = {
    /**
     * Id
     */
    id: string;
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email: string;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Last Login
     */
    last_login?: string | null;
    /**
     * Role
     */
    role?: string;
};

export type LoginApiAuthTokenPostData = {
    body: BodyLoginApiAuthTokenPost;
    path?: never;
    query?: never;
    url: '/api/auth/token';
};

export type LoginApiAuthTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginApiAuthTokenPostError = LoginApiAuthTokenPostErrors[keyof LoginApiAuthTokenPostErrors];

export type LoginApiAuthTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginApiAuthTokenPostResponse = LoginApiAuthTokenPostResponses[keyof LoginApiAuthTokenPostResponses];

export type LoginJsonApiAuthLoginPostData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type LoginJsonApiAuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginJsonApiAuthLoginPostError = LoginJsonApiAuthLoginPostErrors[keyof LoginJsonApiAuthLoginPostErrors];

export type LoginJsonApiAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginJsonApiAuthLoginPostResponse = LoginJsonApiAuthLoginPostResponses[keyof LoginJsonApiAuthLoginPostResponses];

export type RegisterApiAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/auth/register';
};

export type RegisterApiAuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterApiAuthRegisterPostError = RegisterApiAuthRegisterPostErrors[keyof RegisterApiAuthRegisterPostErrors];

export type RegisterApiAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: AppRoutersAuthUser;
};

export type RegisterApiAuthRegisterPostResponse = RegisterApiAuthRegisterPostResponses[keyof RegisterApiAuthRegisterPostResponses];

export type RefreshTokenApiAuthRefreshPostData = {
    body: TokenRefresh;
    path?: never;
    query?: never;
    url: '/api/auth/refresh';
};

export type RefreshTokenApiAuthRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshTokenApiAuthRefreshPostError = RefreshTokenApiAuthRefreshPostErrors[keyof RefreshTokenApiAuthRefreshPostErrors];

export type RefreshTokenApiAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type RefreshTokenApiAuthRefreshPostResponse = RefreshTokenApiAuthRefreshPostResponses[keyof RefreshTokenApiAuthRefreshPostResponses];

export type GetCurrentUserInfoApiAuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetCurrentUserInfoApiAuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: AppRoutersAuthUser;
};

export type GetCurrentUserInfoApiAuthMeGetResponse = GetCurrentUserInfoApiAuthMeGetResponses[keyof GetCurrentUserInfoApiAuthMeGetResponses];

export type ChangePasswordApiAuthChangePasswordPostData = {
    body: PasswordChange;
    path?: never;
    query?: never;
    url: '/api/auth/change-password';
};

export type ChangePasswordApiAuthChangePasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChangePasswordApiAuthChangePasswordPostError = ChangePasswordApiAuthChangePasswordPostErrors[keyof ChangePasswordApiAuthChangePasswordPostErrors];

export type ChangePasswordApiAuthChangePasswordPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LogoutApiAuthLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutApiAuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListDocumentsApiDocsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Version
         */
        version?: string | null;
        /**
         * Language
         */
        language?: string | null;
        /**
         * Category
         */
        category?: string | null;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/api/docs/';
};

export type ListDocumentsApiDocsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListDocumentsApiDocsGetError = ListDocumentsApiDocsGetErrors[keyof ListDocumentsApiDocsGetErrors];

export type ListDocumentsApiDocsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateDocumentApiDocsPostData = {
    /**
     * Document Data
     */
    body: {
        [key: string]: unknown;
    };
    path?: never;
    query?: never;
    url: '/api/docs/';
};

export type CreateDocumentApiDocsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDocumentApiDocsPostError = CreateDocumentApiDocsPostErrors[keyof CreateDocumentApiDocsPostErrors];

export type CreateDocumentApiDocsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetNavigationApiDocsNavigationGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/docs/navigation';
};

export type GetNavigationApiDocsNavigationGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDocumentVersionedApiDocsVersionLangSlugGetData = {
    body?: never;
    path: {
        /**
         * Version
         */
        version: string;
        /**
         * Lang
         */
        lang: string;
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/docs/{version}/{lang}/{slug}';
};

export type GetDocumentVersionedApiDocsVersionLangSlugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentVersionedApiDocsVersionLangSlugGetError = GetDocumentVersionedApiDocsVersionLangSlugGetErrors[keyof GetDocumentVersionedApiDocsVersionLangSlugGetErrors];

export type GetDocumentVersionedApiDocsVersionLangSlugGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteDocumentApiDocsSlugDeleteData = {
    body?: never;
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/docs/{slug}';
};

export type DeleteDocumentApiDocsSlugDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteDocumentApiDocsSlugDeleteError = DeleteDocumentApiDocsSlugDeleteErrors[keyof DeleteDocumentApiDocsSlugDeleteErrors];

export type DeleteDocumentApiDocsSlugDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDocumentApiDocsSlugGetData = {
    body?: never;
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/docs/{slug}';
};

export type GetDocumentApiDocsSlugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentApiDocsSlugGetError = GetDocumentApiDocsSlugGetErrors[keyof GetDocumentApiDocsSlugGetErrors];

export type GetDocumentApiDocsSlugGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateDocumentApiDocsSlugPutData = {
    /**
     * Document Data
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/docs/{slug}';
};

export type UpdateDocumentApiDocsSlugPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDocumentApiDocsSlugPutError = UpdateDocumentApiDocsSlugPutErrors[keyof UpdateDocumentApiDocsSlugPutErrors];

export type UpdateDocumentApiDocsSlugPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDocumentsByCategoryApiDocsCategoryCategoryGetData = {
    body?: never;
    path: {
        /**
         * Category
         */
        category: string;
    };
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/docs/category/{category}';
};

export type GetDocumentsByCategoryApiDocsCategoryCategoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentsByCategoryApiDocsCategoryCategoryGetError = GetDocumentsByCategoryApiDocsCategoryCategoryGetErrors[keyof GetDocumentsByCategoryApiDocsCategoryCategoryGetErrors];

export type GetDocumentsByCategoryApiDocsCategoryCategoryGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SearchDocumentsApiDocsSearchQueryGetData = {
    body?: never;
    path: {
        /**
         * Query
         */
        query: string;
    };
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/docs/search/{query}';
};

export type SearchDocumentsApiDocsSearchQueryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchDocumentsApiDocsSearchQueryGetError = SearchDocumentsApiDocsSearchQueryGetErrors[keyof SearchDocumentsApiDocsSearchQueryGetErrors];

export type SearchDocumentsApiDocsSearchQueryGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDocumentByIdApiDocsDocumentDocIdGetData = {
    body?: never;
    path: {
        /**
         * Doc Id
         */
        doc_id: string;
    };
    query?: never;
    url: '/api/docs/document/{doc_id}';
};

export type GetDocumentByIdApiDocsDocumentDocIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentByIdApiDocsDocumentDocIdGetError = GetDocumentByIdApiDocsDocumentDocIdGetErrors[keyof GetDocumentByIdApiDocsDocumentDocIdGetErrors];

export type GetDocumentByIdApiDocsDocumentDocIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetBlogPostsApiBlogPostsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Published
         */
        published?: boolean | null;
        /**
         * Tag
         * 태그로 필터링
         */
        tag?: string | null;
        /**
         * Category
         * 카테고리로 필터링
         */
        category?: string | null;
        /**
         * Sort By
         * 정렬 기준: created_at, views, title
         */
        sort_by?: string;
        /**
         * Order
         * 정렬 순서: asc, desc
         */
        order?: string;
    };
    url: '/api/blog/posts';
};

export type GetBlogPostsApiBlogPostsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetBlogPostsApiBlogPostsGetError = GetBlogPostsApiBlogPostsGetErrors[keyof GetBlogPostsApiBlogPostsGetErrors];

export type GetBlogPostsApiBlogPostsGetResponses = {
    /**
     * Response Get Blog Posts Api Blog Posts Get
     * Successful Response
     */
    200: Array<BlogPost>;
};

export type GetBlogPostsApiBlogPostsGetResponse = GetBlogPostsApiBlogPostsGetResponses[keyof GetBlogPostsApiBlogPostsGetResponses];

export type CreateBlogPostApiBlogPostsPostData = {
    body: BlogPostCreate;
    path?: never;
    query?: never;
    url: '/api/blog/posts';
};

export type CreateBlogPostApiBlogPostsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBlogPostApiBlogPostsPostError = CreateBlogPostApiBlogPostsPostErrors[keyof CreateBlogPostApiBlogPostsPostErrors];

export type CreateBlogPostApiBlogPostsPostResponses = {
    /**
     * Successful Response
     */
    200: BlogPost;
};

export type CreateBlogPostApiBlogPostsPostResponse = CreateBlogPostApiBlogPostsPostResponses[keyof CreateBlogPostApiBlogPostsPostResponses];

export type GetBlogPostApiBlogPostsPostIdGetData = {
    body?: never;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/blog/posts/{post_id}';
};

export type GetBlogPostApiBlogPostsPostIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetBlogPostApiBlogPostsPostIdGetError = GetBlogPostApiBlogPostsPostIdGetErrors[keyof GetBlogPostApiBlogPostsPostIdGetErrors];

export type GetBlogPostApiBlogPostsPostIdGetResponses = {
    /**
     * Successful Response
     */
    200: BlogPost;
};

export type GetBlogPostApiBlogPostsPostIdGetResponse = GetBlogPostApiBlogPostsPostIdGetResponses[keyof GetBlogPostApiBlogPostsPostIdGetResponses];

export type GetAllTagsApiBlogTagsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/blog/tags';
};

export type GetAllTagsApiBlogTagsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAllCategoriesApiBlogCategoriesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/blog/categories';
};

export type GetAllCategoriesApiBlogCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetRssFeedApiBlogRssGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/blog/rss';
};

export type GetRssFeedApiBlogRssGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetBlogStatsApiBlogStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/blog/stats';
};

export type GetBlogStatsApiBlogStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetForumPostsApiForumGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Category
         * 카테고리 필터
         */
        category?: string | null;
        /**
         * Tag
         * 태그 필터
         */
        tag?: string | null;
        /**
         * Sort By
         * 정렬 기준: created_at, likes, views, replies_count
         */
        sort_by?: string;
        /**
         * Order
         * 정렬 순서: asc, desc
         */
        order?: string;
        /**
         * Status
         * 상태 필터: active, all
         */
        status?: string;
    };
    url: '/api/forum/';
};

export type GetForumPostsApiForumGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetForumPostsApiForumGetError = GetForumPostsApiForumGetErrors[keyof GetForumPostsApiForumGetErrors];

export type GetForumPostsApiForumGetResponses = {
    /**
     * Response Get Forum Posts Api Forum  Get
     * Successful Response
     */
    200: Array<ForumPost>;
};

export type GetForumPostsApiForumGetResponse = GetForumPostsApiForumGetResponses[keyof GetForumPostsApiForumGetResponses];

export type CreateForumPostApiForumPostData = {
    body: CreateForumPost;
    path?: never;
    query?: never;
    url: '/api/forum/';
};

export type CreateForumPostApiForumPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateForumPostApiForumPostError = CreateForumPostApiForumPostErrors[keyof CreateForumPostApiForumPostErrors];

export type CreateForumPostApiForumPostResponses = {
    /**
     * Successful Response
     */
    200: ForumPost;
};

export type CreateForumPostApiForumPostResponse = CreateForumPostApiForumPostResponses[keyof CreateForumPostApiForumPostResponses];

export type GetUserDraftsApiForumDraftsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/forum/drafts';
};

export type GetUserDraftsApiForumDraftsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserDraftsApiForumDraftsGetError = GetUserDraftsApiForumDraftsGetErrors[keyof GetUserDraftsApiForumDraftsGetErrors];

export type GetUserDraftsApiForumDraftsGetResponses = {
    /**
     * Response Get User Drafts Api Forum Drafts Get
     * Successful Response
     */
    200: Array<ForumPost>;
};

export type GetUserDraftsApiForumDraftsGetResponse = GetUserDraftsApiForumDraftsGetResponses[keyof GetUserDraftsApiForumDraftsGetResponses];

export type DeleteForumPostApiForumPostIdDeleteData = {
    body?: never;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}';
};

export type DeleteForumPostApiForumPostIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteForumPostApiForumPostIdDeleteError = DeleteForumPostApiForumPostIdDeleteErrors[keyof DeleteForumPostApiForumPostIdDeleteErrors];

export type DeleteForumPostApiForumPostIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetForumPostApiForumPostIdGetData = {
    body?: never;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}';
};

export type GetForumPostApiForumPostIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetForumPostApiForumPostIdGetError = GetForumPostApiForumPostIdGetErrors[keyof GetForumPostApiForumPostIdGetErrors];

export type GetForumPostApiForumPostIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateForumPostApiForumPostIdPutData = {
    body: UpdateForumPost;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}';
};

export type UpdateForumPostApiForumPostIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateForumPostApiForumPostIdPutError = UpdateForumPostApiForumPostIdPutErrors[keyof UpdateForumPostApiForumPostIdPutErrors];

export type UpdateForumPostApiForumPostIdPutResponses = {
    /**
     * Successful Response
     */
    200: ForumPost;
};

export type UpdateForumPostApiForumPostIdPutResponse = UpdateForumPostApiForumPostIdPutResponses[keyof UpdateForumPostApiForumPostIdPutResponses];

export type GetForumRepliesApiForumPostIdRepliesGetData = {
    body?: never;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/forum/{post_id}/replies';
};

export type GetForumRepliesApiForumPostIdRepliesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetForumRepliesApiForumPostIdRepliesGetError = GetForumRepliesApiForumPostIdRepliesGetErrors[keyof GetForumRepliesApiForumPostIdRepliesGetErrors];

export type GetForumRepliesApiForumPostIdRepliesGetResponses = {
    /**
     * Response Get Forum Replies Api Forum  Post Id  Replies Get
     * Successful Response
     */
    200: Array<ForumReply>;
};

export type GetForumRepliesApiForumPostIdRepliesGetResponse = GetForumRepliesApiForumPostIdRepliesGetResponses[keyof GetForumRepliesApiForumPostIdRepliesGetResponses];

export type CreateForumReplyApiForumPostIdRepliesPostData = {
    body: CreateForumReply;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}/replies';
};

export type CreateForumReplyApiForumPostIdRepliesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateForumReplyApiForumPostIdRepliesPostError = CreateForumReplyApiForumPostIdRepliesPostErrors[keyof CreateForumReplyApiForumPostIdRepliesPostErrors];

export type CreateForumReplyApiForumPostIdRepliesPostResponses = {
    /**
     * Successful Response
     */
    200: ForumReply;
};

export type CreateForumReplyApiForumPostIdRepliesPostResponse = CreateForumReplyApiForumPostIdRepliesPostResponses[keyof CreateForumReplyApiForumPostIdRepliesPostResponses];

export type VoteForumPostApiForumPostIdVotePostData = {
    body: VoteRequest;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}/vote';
};

export type VoteForumPostApiForumPostIdVotePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VoteForumPostApiForumPostIdVotePostError = VoteForumPostApiForumPostIdVotePostErrors[keyof VoteForumPostApiForumPostIdVotePostErrors];

export type VoteForumPostApiForumPostIdVotePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type VoteForumReplyApiForumRepliesReplyIdVotePostData = {
    body: VoteRequest;
    path: {
        /**
         * Reply Id
         */
        reply_id: string;
    };
    query?: never;
    url: '/api/forum/replies/{reply_id}/vote';
};

export type VoteForumReplyApiForumRepliesReplyIdVotePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VoteForumReplyApiForumRepliesReplyIdVotePostError = VoteForumReplyApiForumRepliesReplyIdVotePostErrors[keyof VoteForumReplyApiForumRepliesReplyIdVotePostErrors];

export type VoteForumReplyApiForumRepliesReplyIdVotePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReportForumPostApiForumPostIdReportPostData = {
    body: ReportRequest;
    path: {
        /**
         * Post Id
         */
        post_id: string;
    };
    query?: never;
    url: '/api/forum/{post_id}/report';
};

export type ReportForumPostApiForumPostIdReportPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportForumPostApiForumPostIdReportPostError = ReportForumPostApiForumPostIdReportPostErrors[keyof ReportForumPostApiForumPostIdReportPostErrors];

export type ReportForumPostApiForumPostIdReportPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReportForumReplyApiForumRepliesReplyIdReportPostData = {
    body: ReportRequest;
    path: {
        /**
         * Reply Id
         */
        reply_id: string;
    };
    query?: never;
    url: '/api/forum/replies/{reply_id}/report';
};

export type ReportForumReplyApiForumRepliesReplyIdReportPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReportForumReplyApiForumRepliesReplyIdReportPostError = ReportForumReplyApiForumRepliesReplyIdReportPostErrors[keyof ReportForumReplyApiForumRepliesReplyIdReportPostErrors];

export type ReportForumReplyApiForumRepliesReplyIdReportPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDashboardDataApiDashboardGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/dashboard/';
};

export type GetDashboardDataApiDashboardGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetStatsApiDashboardStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/dashboard/stats';
};

export type GetStatsApiDashboardStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetGeneralAnalyticsApiAnalyticsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/';
};

export type GetGeneralAnalyticsApiAnalyticsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetContentAnalyticsApiAnalyticsContentGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/content';
};

export type GetContentAnalyticsApiAnalyticsContentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUserAnalyticsApiAnalyticsUsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/users';
};

export type GetUserAnalyticsApiAnalyticsUsersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetUsersApiUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Active
         */
        active?: boolean | null;
        /**
         * Role
         */
        role?: string | null;
    };
    url: '/api/users/';
};

export type GetUsersApiUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsersApiUsersGetError = GetUsersApiUsersGetErrors[keyof GetUsersApiUsersGetErrors];

export type GetUsersApiUsersGetResponses = {
    /**
     * Response Get Users Api Users  Get
     * Successful Response
     */
    200: Array<AppRoutersUsersUser>;
};

export type GetUsersApiUsersGetResponse = GetUsersApiUsersGetResponses[keyof GetUsersApiUsersGetResponses];

export type GetUserApiUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type GetUserApiUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserApiUsersUserIdGetError = GetUserApiUsersUserIdGetErrors[keyof GetUserApiUsersUserIdGetErrors];

export type GetUserApiUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: AppRoutersUsersUser;
};

export type GetUserApiUsersUserIdGetResponse = GetUserApiUsersUserIdGetResponses[keyof GetUserApiUsersUserIdGetResponses];

export type GetUserStatsApiUsersStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/stats';
};

export type GetUserStatsApiUsersStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnifiedSearchApiSearchGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * 검색어
         */
        q: string;
        /**
         * Types
         * 검색 타입 (docs,blog,forum)
         */
        types?: string | null;
        /**
         * Limit
         * 결과 수 제한
         */
        limit?: number;
        /**
         * Version
         * 문서 버전
         */
        version?: string | null;
        /**
         * Language
         * 문서 언어
         */
        language?: string | null;
    };
    url: '/api/search/';
};

export type UnifiedSearchApiSearchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnifiedSearchApiSearchGetError = UnifiedSearchApiSearchGetErrors[keyof UnifiedSearchApiSearchGetErrors];

export type UnifiedSearchApiSearchGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type UnifiedSearchApiSearchGetResponse = UnifiedSearchApiSearchGetResponses[keyof UnifiedSearchApiSearchGetResponses];

export type GetSearchSuggestionsApiSearchSuggestionsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * 검색어
         */
        q: string;
        /**
         * Limit
         * 제안 수 제한
         */
        limit?: number;
    };
    url: '/api/search/suggestions';
};

export type GetSearchSuggestionsApiSearchSuggestionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSearchSuggestionsApiSearchSuggestionsGetError = GetSearchSuggestionsApiSearchSuggestionsGetErrors[keyof GetSearchSuggestionsApiSearchSuggestionsGetErrors];

export type GetSearchSuggestionsApiSearchSuggestionsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPopularSearchesApiSearchPopularGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         * 인기 검색어 수
         */
        limit?: number;
    };
    url: '/api/search/popular';
};

export type GetPopularSearchesApiSearchPopularGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPopularSearchesApiSearchPopularGetError = GetPopularSearchesApiSearchPopularGetErrors[keyof GetPopularSearchesApiSearchPopularGetErrors];

export type GetPopularSearchesApiSearchPopularGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SearchDocumentsApiSearchDocsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * 검색어
         */
        q: string;
        /**
         * Version
         * 문서 버전
         */
        version?: string | null;
        /**
         * Language
         * 문서 언어
         */
        language?: string | null;
        /**
         * Limit
         * 결과 수 제한
         */
        limit?: number;
    };
    url: '/api/search/docs';
};

export type SearchDocumentsApiSearchDocsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchDocumentsApiSearchDocsGetError = SearchDocumentsApiSearchDocsGetErrors[keyof SearchDocumentsApiSearchDocsGetErrors];

export type SearchDocumentsApiSearchDocsGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type SearchDocumentsApiSearchDocsGetResponse = SearchDocumentsApiSearchDocsGetResponses[keyof SearchDocumentsApiSearchDocsGetResponses];

export type SearchBlogApiSearchBlogGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * 검색어
         */
        q: string;
        /**
         * Limit
         * 결과 수 제한
         */
        limit?: number;
    };
    url: '/api/search/blog';
};

export type SearchBlogApiSearchBlogGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchBlogApiSearchBlogGetError = SearchBlogApiSearchBlogGetErrors[keyof SearchBlogApiSearchBlogGetErrors];

export type SearchBlogApiSearchBlogGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type SearchBlogApiSearchBlogGetResponse = SearchBlogApiSearchBlogGetResponses[keyof SearchBlogApiSearchBlogGetResponses];

export type SearchForumApiSearchForumGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * 검색어
         */
        q: string;
        /**
         * Limit
         * 결과 수 제한
         */
        limit?: number;
    };
    url: '/api/search/forum';
};

export type SearchForumApiSearchForumGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchForumApiSearchForumGetError = SearchForumApiSearchForumGetErrors[keyof SearchForumApiSearchForumGetErrors];

export type SearchForumApiSearchForumGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type SearchForumApiSearchForumGetResponse = SearchForumApiSearchForumGetResponses[keyof SearchForumApiSearchForumGetResponses];

export type UploadImageApiUploadImagePostData = {
    body: BodyUploadImageApiUploadImagePost;
    path?: never;
    query?: never;
    url: '/api/upload/image';
};

export type UploadImageApiUploadImagePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadImageApiUploadImagePostError = UploadImageApiUploadImagePostErrors[keyof UploadImageApiUploadImagePostErrors];

export type UploadImageApiUploadImagePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadFileApiUploadFilePostData = {
    body: BodyUploadFileApiUploadFilePost;
    path?: never;
    query?: never;
    url: '/api/upload/file';
};

export type UploadFileApiUploadFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileApiUploadFilePostError = UploadFileApiUploadFilePostErrors[keyof UploadFileApiUploadFilePostErrors];

export type UploadFileApiUploadFilePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ServeImageApiUploadServeImageFilenameGetData = {
    body?: never;
    path: {
        /**
         * Filename
         */
        filename: string;
    };
    query?: never;
    url: '/api/upload/serve/image/{filename}';
};

export type ServeImageApiUploadServeImageFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ServeImageApiUploadServeImageFilenameGetError = ServeImageApiUploadServeImageFilenameGetErrors[keyof ServeImageApiUploadServeImageFilenameGetErrors];

export type ServeImageApiUploadServeImageFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ServeFileApiUploadServeFileFilenameGetData = {
    body?: never;
    path: {
        /**
         * Filename
         */
        filename: string;
    };
    query?: never;
    url: '/api/upload/serve/file/{filename}';
};

export type ServeFileApiUploadServeFileFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ServeFileApiUploadServeFileFilenameGetError = ServeFileApiUploadServeFileFilenameGetErrors[keyof ServeFileApiUploadServeFileFilenameGetErrors];

export type ServeFileApiUploadServeFileFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListUserUploadsApiUploadListGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Upload Type
         */
        upload_type?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Skip
         */
        skip?: number;
    };
    url: '/api/upload/list';
};

export type ListUserUploadsApiUploadListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListUserUploadsApiUploadListGetError = ListUserUploadsApiUploadListGetErrors[keyof ListUserUploadsApiUploadListGetErrors];

export type ListUserUploadsApiUploadListGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteUploadApiUploadFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: string;
    };
    query?: never;
    url: '/api/upload/{file_id}';
};

export type DeleteUploadApiUploadFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUploadApiUploadFileIdDeleteError = DeleteUploadApiUploadFileIdDeleteErrors[keyof DeleteUploadApiUploadFileIdDeleteErrors];

export type DeleteUploadApiUploadFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};