// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from './client';
import type { LoginApiAuthTokenPostData, LoginApiAuthTokenPostResponses, LoginApiAuthTokenPostErrors, LoginJsonApiAuthLoginPostData, LoginJsonApiAuthLoginPostResponses, LoginJsonApiAuthLoginPostErrors, RegisterApiAuthRegisterPostData, RegisterApiAuthRegisterPostResponses, RegisterApiAuthRegisterPostErrors, RefreshTokenApiAuthRefreshPostData, RefreshTokenApiAuthRefreshPostResponses, RefreshTokenApiAuthRefreshPostErrors, GetCurrentUserInfoApiAuthMeGetData, GetCurrentUserInfoApiAuthMeGetResponses, ChangePasswordApiAuthChangePasswordPostData, ChangePasswordApiAuthChangePasswordPostResponses, ChangePasswordApiAuthChangePasswordPostErrors, LogoutApiAuthLogoutPostData, LogoutApiAuthLogoutPostResponses, ListDocumentsApiDocsGetData, ListDocumentsApiDocsGetResponses, ListDocumentsApiDocsGetErrors, CreateDocumentApiDocsPostData, CreateDocumentApiDocsPostResponses, CreateDocumentApiDocsPostErrors, GetNavigationApiDocsNavigationGetData, GetNavigationApiDocsNavigationGetResponses, GetDocumentVersionedApiDocsVersionLangSlugGetData, GetDocumentVersionedApiDocsVersionLangSlugGetResponses, GetDocumentVersionedApiDocsVersionLangSlugGetErrors, DeleteDocumentApiDocsSlugDeleteData, DeleteDocumentApiDocsSlugDeleteResponses, DeleteDocumentApiDocsSlugDeleteErrors, GetDocumentApiDocsSlugGetData, GetDocumentApiDocsSlugGetResponses, GetDocumentApiDocsSlugGetErrors, UpdateDocumentApiDocsSlugPutData, UpdateDocumentApiDocsSlugPutResponses, UpdateDocumentApiDocsSlugPutErrors, GetDocumentsByCategoryApiDocsCategoryCategoryGetData, GetDocumentsByCategoryApiDocsCategoryCategoryGetResponses, GetDocumentsByCategoryApiDocsCategoryCategoryGetErrors, SearchDocumentsApiDocsSearchQueryGetData, SearchDocumentsApiDocsSearchQueryGetResponses, SearchDocumentsApiDocsSearchQueryGetErrors, GetDocumentByIdApiDocsDocumentDocIdGetData, GetDocumentByIdApiDocsDocumentDocIdGetResponses, GetDocumentByIdApiDocsDocumentDocIdGetErrors, GetBlogPostsApiBlogPostsGetData, GetBlogPostsApiBlogPostsGetResponses, GetBlogPostsApiBlogPostsGetErrors, CreateBlogPostApiBlogPostsPostData, CreateBlogPostApiBlogPostsPostResponses, CreateBlogPostApiBlogPostsPostErrors, GetBlogPostApiBlogPostsPostIdGetData, GetBlogPostApiBlogPostsPostIdGetResponses, GetBlogPostApiBlogPostsPostIdGetErrors, GetAllTagsApiBlogTagsGetData, GetAllTagsApiBlogTagsGetResponses, GetAllCategoriesApiBlogCategoriesGetData, GetAllCategoriesApiBlogCategoriesGetResponses, GetRssFeedApiBlogRssGetData, GetRssFeedApiBlogRssGetResponses, GetBlogStatsApiBlogStatsGetData, GetBlogStatsApiBlogStatsGetResponses, GetForumPostsApiForumGetData, GetForumPostsApiForumGetResponses, GetForumPostsApiForumGetErrors, CreateForumPostApiForumPostData, CreateForumPostApiForumPostResponses, CreateForumPostApiForumPostErrors, GetUserDraftsApiForumDraftsGetData, GetUserDraftsApiForumDraftsGetResponses, GetUserDraftsApiForumDraftsGetErrors, DeleteForumPostApiForumPostIdDeleteData, DeleteForumPostApiForumPostIdDeleteResponses, DeleteForumPostApiForumPostIdDeleteErrors, GetForumPostApiForumPostIdGetData, GetForumPostApiForumPostIdGetResponses, GetForumPostApiForumPostIdGetErrors, UpdateForumPostApiForumPostIdPutData, UpdateForumPostApiForumPostIdPutResponses, UpdateForumPostApiForumPostIdPutErrors, GetForumRepliesApiForumPostIdRepliesGetData, GetForumRepliesApiForumPostIdRepliesGetResponses, GetForumRepliesApiForumPostIdRepliesGetErrors, CreateForumReplyApiForumPostIdRepliesPostData, CreateForumReplyApiForumPostIdRepliesPostResponses, CreateForumReplyApiForumPostIdRepliesPostErrors, VoteForumPostApiForumPostIdVotePostData, VoteForumPostApiForumPostIdVotePostResponses, VoteForumPostApiForumPostIdVotePostErrors, VoteForumReplyApiForumRepliesReplyIdVotePostData, VoteForumReplyApiForumRepliesReplyIdVotePostResponses, VoteForumReplyApiForumRepliesReplyIdVotePostErrors, ReportForumPostApiForumPostIdReportPostData, ReportForumPostApiForumPostIdReportPostResponses, ReportForumPostApiForumPostIdReportPostErrors, ReportForumReplyApiForumRepliesReplyIdReportPostData, ReportForumReplyApiForumRepliesReplyIdReportPostResponses, ReportForumReplyApiForumRepliesReplyIdReportPostErrors, GetDashboardDataApiDashboardGetData, GetDashboardDataApiDashboardGetResponses, GetStatsApiDashboardStatsGetData, GetStatsApiDashboardStatsGetResponses, GetGeneralAnalyticsApiAnalyticsGetData, GetGeneralAnalyticsApiAnalyticsGetResponses, GetContentAnalyticsApiAnalyticsContentGetData, GetContentAnalyticsApiAnalyticsContentGetResponses, GetUserAnalyticsApiAnalyticsUsersGetData, GetUserAnalyticsApiAnalyticsUsersGetResponses, GetUsersApiUsersGetData, GetUsersApiUsersGetResponses, GetUsersApiUsersGetErrors, GetUserApiUsersUserIdGetData, GetUserApiUsersUserIdGetResponses, GetUserApiUsersUserIdGetErrors, GetUserStatsApiUsersStatsGetData, GetUserStatsApiUsersStatsGetResponses, UnifiedSearchApiSearchGetData, UnifiedSearchApiSearchGetResponses, UnifiedSearchApiSearchGetErrors, GetSearchSuggestionsApiSearchSuggestionsGetData, GetSearchSuggestionsApiSearchSuggestionsGetResponses, GetSearchSuggestionsApiSearchSuggestionsGetErrors, GetPopularSearchesApiSearchPopularGetData, GetPopularSearchesApiSearchPopularGetResponses, GetPopularSearchesApiSearchPopularGetErrors, SearchDocumentsApiSearchDocsGetData, SearchDocumentsApiSearchDocsGetResponses, SearchDocumentsApiSearchDocsGetErrors, SearchBlogApiSearchBlogGetData, SearchBlogApiSearchBlogGetResponses, SearchBlogApiSearchBlogGetErrors, SearchForumApiSearchForumGetData, SearchForumApiSearchForumGetResponses, SearchForumApiSearchForumGetErrors, UploadImageApiUploadImagePostData, UploadImageApiUploadImagePostResponses, UploadImageApiUploadImagePostErrors, UploadFileApiUploadFilePostData, UploadFileApiUploadFilePostResponses, UploadFileApiUploadFilePostErrors, ServeImageApiUploadServeImageFilenameGetData, ServeImageApiUploadServeImageFilenameGetResponses, ServeImageApiUploadServeImageFilenameGetErrors, ServeFileApiUploadServeFileFilenameGetData, ServeFileApiUploadServeFileFilenameGetResponses, ServeFileApiUploadServeFileFilenameGetErrors, ListUserUploadsApiUploadListGetData, ListUserUploadsApiUploadListGetResponses, ListUserUploadsApiUploadListGetErrors, DeleteUploadApiUploadFileIdDeleteData, DeleteUploadApiUploadFileIdDeleteResponses, DeleteUploadApiUploadFileIdDeleteErrors, RootGetData, RootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 * 로그인 및 토큰 발급
 */
export const loginApiAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiAuthTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiAuthTokenPostResponses, LoginApiAuthTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/api/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Login Json
 * 로그인 (JSON 형식)
 */
export const loginJsonApiAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginJsonApiAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginJsonApiAuthLoginPostResponses, LoginJsonApiAuthLoginPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register
 * 사용자 등록
 */
export const registerApiAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterApiAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterApiAuthRegisterPostResponses, RegisterApiAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh Token
 * 리프레시 토큰으로 새 액세스 토큰 발급
 */
export const refreshTokenApiAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenApiAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokenApiAuthRefreshPostResponses, RefreshTokenApiAuthRefreshPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Current User Info
 * 현재 사용자 정보 가져오기
 */
export const getCurrentUserInfoApiAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserInfoApiAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserInfoApiAuthMeGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Change Password
 * 비밀번호 변경
 */
export const changePasswordApiAuthChangePasswordPost = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordApiAuthChangePasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangePasswordApiAuthChangePasswordPostResponses, ChangePasswordApiAuthChangePasswordPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * 로그아웃 (토큰 무효화 - 실제로는 클라이언트에서 토큰 삭제)
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutApiAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutApiAuthLogoutPostResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * List Documents
 * 문서 목록 조회 (버전/언어 필터링 지원)
 */
export const listDocumentsApiDocsGet = <ThrowOnError extends boolean = false>(options?: Options<ListDocumentsApiDocsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDocumentsApiDocsGetResponses, ListDocumentsApiDocsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/',
        ...options
    });
};

/**
 * Create Document
 * 새 문서 생성
 */
export const createDocumentApiDocsPost = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentApiDocsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDocumentApiDocsPostResponses, CreateDocumentApiDocsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Navigation
 * 네비게이션 구조 조회
 */
export const getNavigationApiDocsNavigationGet = <ThrowOnError extends boolean = false>(options?: Options<GetNavigationApiDocsNavigationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNavigationApiDocsNavigationGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/navigation',
        ...options
    });
};

/**
 * Get Document Versioned
 * 버전별/언어별 문서 조회
 */
export const getDocumentVersionedApiDocsVersionLangSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionedApiDocsVersionLangSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentVersionedApiDocsVersionLangSlugGetResponses, GetDocumentVersionedApiDocsVersionLangSlugGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/{version}/{lang}/{slug}',
        ...options
    });
};

/**
 * Delete Document
 * 문서 삭제
 */
export const deleteDocumentApiDocsSlugDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentApiDocsSlugDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentApiDocsSlugDeleteResponses, DeleteDocumentApiDocsSlugDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/{slug}',
        ...options
    });
};

/**
 * Get Document
 * 문서 조회 (slug 기준)
 */
export const getDocumentApiDocsSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentApiDocsSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentApiDocsSlugGetResponses, GetDocumentApiDocsSlugGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/{slug}',
        ...options
    });
};

/**
 * Update Document
 * 문서 업데이트
 */
export const updateDocumentApiDocsSlugPut = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentApiDocsSlugPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDocumentApiDocsSlugPutResponses, UpdateDocumentApiDocsSlugPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/{slug}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Documents By Category
 * 카테고리별 문서 조회
 */
export const getDocumentsByCategoryApiDocsCategoryCategoryGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentsByCategoryApiDocsCategoryCategoryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentsByCategoryApiDocsCategoryCategoryGetResponses, GetDocumentsByCategoryApiDocsCategoryCategoryGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/category/{category}',
        ...options
    });
};

/**
 * Search Documents
 * 문서 전체 텍스트 검색
 */
export const searchDocumentsApiDocsSearchQueryGet = <ThrowOnError extends boolean = false>(options: Options<SearchDocumentsApiDocsSearchQueryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchDocumentsApiDocsSearchQueryGetResponses, SearchDocumentsApiDocsSearchQueryGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/search/{query}',
        ...options
    });
};

/**
 * Get Document By Id
 * ID로 문서 조회 (레거시 엔드포인트)
 */
export const getDocumentByIdApiDocsDocumentDocIdGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdApiDocsDocumentDocIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdApiDocsDocumentDocIdGetResponses, GetDocumentByIdApiDocsDocumentDocIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/docs/document/{doc_id}',
        ...options
    });
};

/**
 * Get Blog Posts
 * 블로그 포스트 목록 조회 (태그/카테고리 필터링 및 정렬 지원)
 */
export const getBlogPostsApiBlogPostsGet = <ThrowOnError extends boolean = false>(options?: Options<GetBlogPostsApiBlogPostsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBlogPostsApiBlogPostsGetResponses, GetBlogPostsApiBlogPostsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/posts',
        ...options
    });
};

/**
 * Create Blog Post
 * 새 블로그 포스트 생성
 */
export const createBlogPostApiBlogPostsPost = <ThrowOnError extends boolean = false>(options: Options<CreateBlogPostApiBlogPostsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBlogPostApiBlogPostsPostResponses, CreateBlogPostApiBlogPostsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Blog Post
 * 특정 블로그 포스트 조회
 */
export const getBlogPostApiBlogPostsPostIdGet = <ThrowOnError extends boolean = false>(options: Options<GetBlogPostApiBlogPostsPostIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBlogPostApiBlogPostsPostIdGetResponses, GetBlogPostApiBlogPostsPostIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/posts/{post_id}',
        ...options
    });
};

/**
 * Get All Tags
 * 모든 태그 목록 조회
 */
export const getAllTagsApiBlogTagsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllTagsApiBlogTagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTagsApiBlogTagsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/tags',
        ...options
    });
};

/**
 * Get All Categories
 * 모든 카테고리 목록 조회
 */
export const getAllCategoriesApiBlogCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllCategoriesApiBlogCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCategoriesApiBlogCategoriesGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/categories',
        ...options
    });
};

/**
 * Get Rss Feed
 * 블로그 RSS 피드 제공
 */
export const getRssFeedApiBlogRssGet = <ThrowOnError extends boolean = false>(options?: Options<GetRssFeedApiBlogRssGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRssFeedApiBlogRssGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/rss',
        ...options
    });
};

/**
 * Get Blog Stats
 * 블로그 통계 정보
 */
export const getBlogStatsApiBlogStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetBlogStatsApiBlogStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBlogStatsApiBlogStatsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/blog/stats',
        ...options
    });
};

/**
 * Get Forum Posts
 * 게시판 포스트 목록 가져오기 (필터링 및 정렬 지원)
 */
export const getForumPostsApiForumGet = <ThrowOnError extends boolean = false>(options?: Options<GetForumPostsApiForumGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetForumPostsApiForumGetResponses, GetForumPostsApiForumGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/',
        ...options
    });
};

/**
 * Create Forum Post
 * 새 게시판 포스트 생성
 */
export const createForumPostApiForumPost = <ThrowOnError extends boolean = false>(options: Options<CreateForumPostApiForumPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateForumPostApiForumPostResponses, CreateForumPostApiForumPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Drafts
 * 사용자의 초안 목록 가져오기
 */
export const getUserDraftsApiForumDraftsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserDraftsApiForumDraftsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserDraftsApiForumDraftsGetResponses, GetUserDraftsApiForumDraftsGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/drafts',
        ...options
    });
};

/**
 * Delete Forum Post
 * 게시물 삭제 (작성자 또는 관리자만 가능)
 */
export const deleteForumPostApiForumPostIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteForumPostApiForumPostIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteForumPostApiForumPostIdDeleteResponses, DeleteForumPostApiForumPostIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/{post_id}',
        ...options
    });
};

/**
 * Get Forum Post
 * 특정 게시판 포스트 가져오기
 */
export const getForumPostApiForumPostIdGet = <ThrowOnError extends boolean = false>(options: Options<GetForumPostApiForumPostIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumPostApiForumPostIdGetResponses, GetForumPostApiForumPostIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/forum/{post_id}',
        ...options
    });
};

/**
 * Update Forum Post
 * 게시물 수정 (작성자 또는 관리자만 가능)
 */
export const updateForumPostApiForumPostIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateForumPostApiForumPostIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateForumPostApiForumPostIdPutResponses, UpdateForumPostApiForumPostIdPutErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/{post_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Forum Replies
 * 게시물 댓글 목록 조회
 */
export const getForumRepliesApiForumPostIdRepliesGet = <ThrowOnError extends boolean = false>(options: Options<GetForumRepliesApiForumPostIdRepliesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetForumRepliesApiForumPostIdRepliesGetResponses, GetForumRepliesApiForumPostIdRepliesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/forum/{post_id}/replies',
        ...options
    });
};

/**
 * Create Forum Reply
 * 게시물에 댓글 작성
 */
export const createForumReplyApiForumPostIdRepliesPost = <ThrowOnError extends boolean = false>(options: Options<CreateForumReplyApiForumPostIdRepliesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateForumReplyApiForumPostIdRepliesPostResponses, CreateForumReplyApiForumPostIdRepliesPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/{post_id}/replies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Vote Forum Post
 * 게시물 추천/비추천
 */
export const voteForumPostApiForumPostIdVotePost = <ThrowOnError extends boolean = false>(options: Options<VoteForumPostApiForumPostIdVotePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VoteForumPostApiForumPostIdVotePostResponses, VoteForumPostApiForumPostIdVotePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/{post_id}/vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Vote Forum Reply
 * 댓글 추천/비추천
 */
export const voteForumReplyApiForumRepliesReplyIdVotePost = <ThrowOnError extends boolean = false>(options: Options<VoteForumReplyApiForumRepliesReplyIdVotePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VoteForumReplyApiForumRepliesReplyIdVotePostResponses, VoteForumReplyApiForumRepliesReplyIdVotePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/replies/{reply_id}/vote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Report Forum Post
 * 게시물 신고
 */
export const reportForumPostApiForumPostIdReportPost = <ThrowOnError extends boolean = false>(options: Options<ReportForumPostApiForumPostIdReportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReportForumPostApiForumPostIdReportPostResponses, ReportForumPostApiForumPostIdReportPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/{post_id}/report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Report Forum Reply
 * 댓글 신고
 */
export const reportForumReplyApiForumRepliesReplyIdReportPost = <ThrowOnError extends boolean = false>(options: Options<ReportForumReplyApiForumRepliesReplyIdReportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReportForumReplyApiForumRepliesReplyIdReportPostResponses, ReportForumReplyApiForumRepliesReplyIdReportPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forum/replies/{reply_id}/report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Dashboard Data
 * 대시보드 데이터 가져오기
 */
export const getDashboardDataApiDashboardGet = <ThrowOnError extends boolean = false>(options?: Options<GetDashboardDataApiDashboardGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDashboardDataApiDashboardGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/dashboard/',
        ...options
    });
};

/**
 * Get Stats
 * 시스템 통계 가져오기
 */
export const getStatsApiDashboardStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetStatsApiDashboardStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatsApiDashboardStatsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/dashboard/stats',
        ...options
    });
};

/**
 * Get General Analytics
 * 일반 분석 데이터 조회
 */
export const getGeneralAnalyticsApiAnalyticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetGeneralAnalyticsApiAnalyticsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGeneralAnalyticsApiAnalyticsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/analytics/',
        ...options
    });
};

/**
 * Get Content Analytics
 * 콘텐츠 분석 데이터 조회
 */
export const getContentAnalyticsApiAnalyticsContentGet = <ThrowOnError extends boolean = false>(options?: Options<GetContentAnalyticsApiAnalyticsContentGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetContentAnalyticsApiAnalyticsContentGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/analytics/content',
        ...options
    });
};

/**
 * Get User Analytics
 * 사용자 분석 데이터 조회
 */
export const getUserAnalyticsApiAnalyticsUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserAnalyticsApiAnalyticsUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserAnalyticsApiAnalyticsUsersGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/analytics/users',
        ...options
    });
};

/**
 * Get Users
 * 사용자 목록 조회
 */
export const getUsersApiUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiUsersGetResponses, GetUsersApiUsersGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/',
        ...options
    });
};

/**
 * Get User
 * 특정 사용자 조회
 */
export const getUserApiUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserApiUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserApiUsersUserIdGetResponses, GetUserApiUsersUserIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * Get User Stats
 * 사용자 통계 정보
 */
export const getUserStatsApiUsersStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserStatsApiUsersStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserStatsApiUsersStatsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/stats',
        ...options
    });
};

/**
 * Unified Search
 * 통합 검색 API
 */
export const unifiedSearchApiSearchGet = <ThrowOnError extends boolean = false>(options: Options<UnifiedSearchApiSearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UnifiedSearchApiSearchGetResponses, UnifiedSearchApiSearchGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/',
        ...options
    });
};

/**
 * Get Search Suggestions
 * 검색 자동완성 제안
 */
export const getSearchSuggestionsApiSearchSuggestionsGet = <ThrowOnError extends boolean = false>(options: Options<GetSearchSuggestionsApiSearchSuggestionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSearchSuggestionsApiSearchSuggestionsGetResponses, GetSearchSuggestionsApiSearchSuggestionsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/suggestions',
        ...options
    });
};

/**
 * Get Popular Searches
 * 인기 검색어 조회
 */
export const getPopularSearchesApiSearchPopularGet = <ThrowOnError extends boolean = false>(options?: Options<GetPopularSearchesApiSearchPopularGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPopularSearchesApiSearchPopularGetResponses, GetPopularSearchesApiSearchPopularGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/popular',
        ...options
    });
};

/**
 * Search Documents
 * 문서 전용 검색
 */
export const searchDocumentsApiSearchDocsGet = <ThrowOnError extends boolean = false>(options: Options<SearchDocumentsApiSearchDocsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchDocumentsApiSearchDocsGetResponses, SearchDocumentsApiSearchDocsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/docs',
        ...options
    });
};

/**
 * Search Blog
 * 블로그 전용 검색
 */
export const searchBlogApiSearchBlogGet = <ThrowOnError extends boolean = false>(options: Options<SearchBlogApiSearchBlogGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchBlogApiSearchBlogGetResponses, SearchBlogApiSearchBlogGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/blog',
        ...options
    });
};

/**
 * Search Forum
 * 포럼 전용 검색
 */
export const searchForumApiSearchForumGet = <ThrowOnError extends boolean = false>(options: Options<SearchForumApiSearchForumGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchForumApiSearchForumGetResponses, SearchForumApiSearchForumGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/search/forum',
        ...options
    });
};

/**
 * Upload Image
 * 이미지 파일 업로드
 */
export const uploadImageApiUploadImagePost = <ThrowOnError extends boolean = false>(options: Options<UploadImageApiUploadImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadImageApiUploadImagePostResponses, UploadImageApiUploadImagePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/upload/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload File
 * 일반 파일 업로드
 */
export const uploadFileApiUploadFilePost = <ThrowOnError extends boolean = false>(options: Options<UploadFileApiUploadFilePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileApiUploadFilePostResponses, UploadFileApiUploadFilePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/upload/file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Serve Image
 * 이미지 파일 서빙
 */
export const serveImageApiUploadServeImageFilenameGet = <ThrowOnError extends boolean = false>(options: Options<ServeImageApiUploadServeImageFilenameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServeImageApiUploadServeImageFilenameGetResponses, ServeImageApiUploadServeImageFilenameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/upload/serve/image/{filename}',
        ...options
    });
};

/**
 * Serve File
 * 일반 파일 서빙 (다운로드)
 */
export const serveFileApiUploadServeFileFilenameGet = <ThrowOnError extends boolean = false>(options: Options<ServeFileApiUploadServeFileFilenameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServeFileApiUploadServeFileFilenameGetResponses, ServeFileApiUploadServeFileFilenameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/upload/serve/file/{filename}',
        ...options
    });
};

/**
 * List User Uploads
 * 사용자가 업로드한 파일 목록 조회
 */
export const listUserUploadsApiUploadListGet = <ThrowOnError extends boolean = false>(options?: Options<ListUserUploadsApiUploadListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUserUploadsApiUploadListGetResponses, ListUserUploadsApiUploadListGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/upload/list',
        ...options
    });
};

/**
 * Delete Upload
 * 업로드된 파일 삭제
 */
export const deleteUploadApiUploadFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUploadApiUploadFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUploadApiUploadFileIdDeleteResponses, DeleteUploadApiUploadFileIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/upload/{file_id}',
        ...options
    });
};

/**
 * Root
 * 루트 엔드포인트
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * 헬스 체크 엔드포인트
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};